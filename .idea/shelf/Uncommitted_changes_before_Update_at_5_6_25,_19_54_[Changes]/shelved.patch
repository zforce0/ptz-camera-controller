Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources xmlns:tools=\"http://schemas.android.com/tools\">\n    <!-- Base application theme. -->\n    <style name=\"Theme.PTZCameraController\" parent=\"Theme.MaterialComponents.DayNight.NoActionBar\">\n        <!-- Primary brand color. -->\n        <item name=\"colorPrimary\">@color/primary</item>\n        <item name=\"colorPrimaryVariant\">@color/primary_dark</item>\n        <item name=\"colorOnPrimary\">@color/surface</item>\n        <!-- Secondary brand color. -->\n        <item name=\"colorSecondary\">@color/accent</item>\n        <item name=\"colorSecondaryVariant\">@color/accent_dark</item>\n        <item name=\"colorOnSecondary\">@color/surface</item>\n        <!-- Status bar color. -->\n        <item name=\"android:statusBarColor\">?attr/colorPrimaryVariant</item>\n        <!-- Background colors -->\n        <item name=\"android:colorBackground\">@color/background</item>\n        <item name=\"colorSurface\">@color/surface</item>\n        <item name=\"colorOnSurface\">@color/text_primary</item>\n        <item name=\"colorOnBackground\">@color/text_primary</item>\n        <!-- Text colors -->\n        <item name=\"android:textColorPrimary\">@color/text_primary</item>\n        <item name=\"android:textColorSecondary\">@color/text_secondary</item>\n        <item name=\"android:textColorHint\">@color/text_hint</item>\n        <!-- Navigation bar -->\n        <item name=\"android:navigationBarColor\">@color/primary_dark</item>\n        <!-- Enable full screen layout under notch -->\n        <item name=\"android:windowLayoutInDisplayCutoutMode\" tools:targetApi=\"o_mr1\">shortEdges</item>\n        <!-- Style references -->\n        <item name=\"buttonStyle\">@style/Widget.PTZCameraController.Button</item>\n        <item name=\"materialButtonOutlinedStyle\">@style/Widget.PTZCameraController.Button.OutlinedButton</item>\n        <item name=\"switchStyle\">@style/Widget.PTZCameraController.Switch</item>\n        <item name=\"textAppearanceHeadline6\">@style/TextAppearance.PTZCameraController.Title</item>\n        <item name=\"textAppearanceSubtitle1\">@style/TextAppearance.PTZCameraController.Subtitle</item>\n        <item name=\"textAppearanceBody1\">@style/TextAppearance.PTZCameraController.Body</item>\n        <item name=\"textAppearanceCaption\">@style/TextAppearance.PTZCameraController.Caption</item>\n    </style>\n    \n    <!-- Splash Screen theme. -->\n    <style name=\"Theme.PTZCameraController.SplashScreen\" parent=\"Theme.PTZCameraController\">\n        <item name=\"android:windowBackground\">@color/primary</item>\n        <item name=\"android:statusBarColor\">@color/primary</item>\n        <item name=\"android:navigationBarColor\">@color/primary</item>\n    </style>\n    \n    <!-- Dialog themes -->\n    <style name=\"Theme.PTZCameraController.Dialog\" parent=\"ThemeOverlay.MaterialComponents.Dialog.Alert\">\n        <item name=\"colorPrimary\">@color/primary</item>\n        <item name=\"colorAccent\">@color/accent</item>\n        <item name=\"android:textColorPrimary\">@color/text_primary</item>\n        <item name=\"android:textColorSecondary\">@color/text_secondary</item>\n        <item name=\"android:windowBackground\">@color/surface</item>\n    </style>\n\n    <!-- Keep IconButton as it's unique to themes.xml -->\n    <style name=\"Widget.PTZCameraController.IconButton\" parent=\"Widget.MaterialComponents.Button.Icon\">\n        <item name=\"android:minWidth\">48dp</item>\n        <item name=\"android:minHeight\">48dp</item>\n        <item name=\"android:padding\">8dp</item>\n        <item name=\"android:insetTop\">0dp</item>\n        <item name=\"android:insetBottom\">0dp</item>\n        <item name=\"android:insetLeft\">0dp</item>\n        <item name=\"android:insetRight\">0dp</item>\n    </style>\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
--- a/app/src/main/res/values/themes.xml	(revision c202139940db200d59956b96b2d57da2b9f2dd1d)
+++ b/app/src/main/res/values/themes.xml	(date 1746532325244)
@@ -1,4 +1,3 @@
-
 <?xml version="1.0" encoding="utf-8"?>
 <resources xmlns:tools="http://schemas.android.com/tools">
     <!-- Base application theme. -->
Index: android_app/local.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nsdk.dir=/home/runner/Android/Sdk\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/android_app/local.properties b/android_app/local.properties
--- a/android_app/local.properties	(revision c202139940db200d59956b96b2d57da2b9f2dd1d)
+++ b/android_app/local.properties	(date 1746532325247)
@@ -1,2 +1,2 @@
 
-sdk.dir=/home/runner/Android/Sdk
+sdk.dir=/Users/jbc-zeph21/Library/Android/sdk
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AndroidLayouts\">\n    <shared>\n      <config>\n        <device id=\"pixel_tablet\" />\n      </config>\n    </shared>\n    <layouts>\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_camera_control.xml\">\n        <config>\n          <theme>@style/AppTheme</theme>\n        </config>\n      </layout>\n      <layout url=\"file://$PROJECT_DIR$/app/src/main/res/layout/fragment_connection.xml\">\n        <config>\n          <theme>@style/AppTheme</theme>\n        </config>\n      </layout>\n    </layouts>\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"NONE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"afa553c9-00e4-405e-8ece-5dc24f36d777\" name=\"Changes\" comment=\"First successful runnable with dummy UI, local Android Studio build version\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ClangdSettings\">\n    <option name=\"formatViaClangd\" value=\"false\" />\n  </component>\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[DeviceId(pluginId=LocalEmulator, isTemplate=false, identifier=path=/Users/jbc-zeph21/.android/avd/Medium_Phone.avd)]\" />\n  <component name=\"ExternalProjectsData\">\n    <projectState path=\"$PROJECT_DIR$\">\n      <ProjectState />\n    </projectState>\n  </component>\n  <component name=\"ExternalProjectsManager\">\n    <system id=\"GRADLE\">\n      <state>\n        <projects_view>\n          <tree_state>\n            <expand>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"PTZ Controller\" type=\"f1a62948:ProjectNode\" />\n              </path>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"PTZ Controller\" type=\"f1a62948:ProjectNode\" />\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\n              </path>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"PTZ Controller\" type=\"f1a62948:ProjectNode\" />\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\n                <item name=\"other\" type=\"c8890929:TasksNode$1\" />\n              </path>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"PTZ Controller\" type=\"f1a62948:ProjectNode\" />\n                <item name=\"app\" type=\"2d1252cf:ModuleNode\" />\n              </path>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"PTZ Controller\" type=\"f1a62948:ProjectNode\" />\n                <item name=\"app\" type=\"2d1252cf:ModuleNode\" />\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\n              </path>\n              <path>\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\n                <item name=\"PTZ Controller\" type=\"f1a62948:ProjectNode\" />\n                <item name=\"app\" type=\"2d1252cf:ModuleNode\" />\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\n                <item name=\"other\" type=\"c8890929:TasksNode$1\" />\n              </path>\n            </expand>\n            <select />\n          </tree_state>\n        </projects_view>\n      </state>\n    </system>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;zforce0&quot;\n  }\n}</component>\n  <component name=\"GithubDefaultAccount\">\n    <option name=\"defaultAccountId\" value=\"b311a723-ec99-4955-ae6b-c300aad753f4\" />\n  </component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/zforce0/ptz-camera-controller&quot;,\n    &quot;accountId&quot;: &quot;b311a723-ec99-4955-ae6b-c300aad753f4&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2wcK1JJzcKFkXn4P83wvJLguI7Q\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectReloadState\">\n    <option name=\"STATE\" value=\"1\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"Android App.app.executor\": \"Run\",\n    \"Gradle.Upgrade Gradle wrapper.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\n    \"RunOnceActivity.git.unshallow\": \"true\",\n    \"RunOnceActivity.readMode.enableVisualFormatting\": \"true\",\n    \"cf.first.check.clang-format\": \"false\",\n    \"cidr.known.project.marker\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"settings.editor.selected.configurable\": \"vcs.Git\"\n  }\n}]]></component>\n  <component name=\"RunManager\">\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\n      <module name=\"PTZ_Controller.app\" />\n      <option name=\"ANDROID_RUN_CONFIGURATION_SCHEMA_VERSION\" value=\"1\" />\n      <option name=\"DEPLOY\" value=\"true\" />\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\n      <option name=\"ALL_USERS\" value=\"false\" />\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\n      <option name=\"ALLOW_ASSUME_VERIFIED\" value=\"false\" />\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\n      <option name=\"MODE\" value=\"default_activity\" />\n      <option name=\"RESTORE_ENABLED\" value=\"false\" />\n      <option name=\"RESTORE_FILE\" value=\"\" />\n      <option name=\"RESTORE_FRESH_INSTALL_ONLY\" value=\"false\" />\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\n      <Auto>\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\n        <option name=\"WORKING_DIR\" value=\"\" />\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\n      </Auto>\n      <Hybrid>\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\n        <option name=\"WORKING_DIR\" value=\"\" />\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\n      </Hybrid>\n      <Java>\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\n      </Java>\n      <Native>\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\n        <option name=\"WORKING_DIR\" value=\"\" />\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\n      </Native>\n      <Profilers>\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\n      </Profilers>\n      <option name=\"DEEP_LINK\" value=\"\" />\n      <option name=\"ACTIVITY\" value=\"\" />\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\n      <method v=\"2\">\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"afa553c9-00e4-405e-8ece-5dc24f36d777\" name=\"Changes\" comment=\"\" />\n      <created>1746335206178</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1746335206178</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"local Android Studio build version\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746341865853</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746341865853</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"local Android Studio build version\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746350791030</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746350791030</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"First successful runnable with dummy UI, local Android Studio build version\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746358537223</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746358537223</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"First successful runnable with dummy UI, local Android Studio build version\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1746359000037</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1746359000037</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"local Android Studio build version\" />\n    <MESSAGE value=\"First successful runnable with dummy UI, local Android Studio build version\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"First successful runnable with dummy UI, local Android Studio build version\" />\n  </component>\n  <component name=\"play_dynamic_filters_status\">\n    <option name=\"appIdToCheckInfo\">\n      <map>\n        <entry key=\"com.ptzcontroller\">\n          <value>\n            <CheckInfo lastCheckTimestamp=\"1746341350421\" />\n          </value>\n        </entry>\n        <entry key=\"com.ptzcontroller.test\">\n          <value>\n            <CheckInfo lastCheckTimestamp=\"1746341350427\" />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c202139940db200d59956b96b2d57da2b9f2dd1d)
+++ b/.idea/workspace.xml	(date 1746532325251)
@@ -24,7 +24,29 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="afa553c9-00e4-405e-8ece-5dc24f36d777" name="Changes" comment="First successful runnable with dummy UI, local Android Studio build version">
+      <change afterPath="$PROJECT_DIR$/onboard/pi_ptz_stream.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/checksums/checksums.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/checksums/checksums.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/checksums/md5-checksums.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/checksums/md5-checksums.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/checksums/sha1-checksums.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/checksums/sha1-checksums.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/executionHistory/executionHistory.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/fileHashes.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/resourceHashesCache.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.11.1/fileHashes/resourceHashesCache.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/.globals.work.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/.globals.work.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/.strings.work.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/.strings.work.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/_app.work.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/_app.work.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/buildfingerprint.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/buildfingerprint.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/projectfingerprint.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/projectfingerprint.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/work.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/configuration-cache/806yk4hiyt5pjnm80yqp8uqyt/work.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/deploymentTargetSelector.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/deploymentTargetSelector.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/android_app/local.properties" beforeDir="false" afterPath="$PROJECT_DIR$/android_app/local.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values-night/colors.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/values/themes.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/values/themes.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -117,22 +139,22 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "Android App.app.executor": "Run",
-    "Gradle.Upgrade Gradle wrapper.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.cidr.known.project.marker": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "RunOnceActivity.readMode.enableVisualFormatting": "true",
-    "cf.first.check.clang-format": "false",
-    "cidr.known.project.marker": "true",
-    "git-widget-placeholder": "main",
-    "kotlin-language-version-configured": "true",
-    "settings.editor.selected.configurable": "vcs.Git"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;Android App.app.executor&quot;: &quot;Run&quot;,
+    &quot;Gradle.Upgrade Gradle wrapper.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,
+    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
+    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;vcs.Git&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="app" type="AndroidRunConfigurationType" factoryName="Android App" activateToolWindowBeforeRun="false">
       <module name="PTZ_Controller.app" />
@@ -248,9 +270,28 @@
       <option name="project" value="LOCAL" />
       <updated>1746359000037</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="First successful runnable with dummy UI, local Android Studio build version">
+      <option name="closed" value="true" />
+      <created>1746359515846</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1746359515846</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="local Android Studio build version" />
     <MESSAGE value="First successful runnable with dummy UI, local Android Studio build version" />
@@ -261,12 +302,12 @@
       <map>
         <entry key="com.ptzcontroller">
           <value>
-            <CheckInfo lastCheckTimestamp="1746341350421" />
+            <CheckInfo lastCheckTimestamp="1746528038298" />
           </value>
         </entry>
         <entry key="com.ptzcontroller.test">
           <value>
-            <CheckInfo lastCheckTimestamp="1746341350427" />
+            <CheckInfo lastCheckTimestamp="1746528038297" />
           </value>
         </entry>
       </map>
Index: onboard/pi_ptz_stream.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/onboard/pi_ptz_stream.py b/onboard/pi_ptz_stream.py
new file mode 100644
--- /dev/null	(date 1746532325266)
+++ b/onboard/pi_ptz_stream.py	(date 1746532325266)
@@ -0,0 +1,902 @@
+#!/usr/bin/env python3
+"""
+Raspberry Pi PTZ Camera Control & Streaming Script
+for controlling a PTZ camera using the Pelco-D protocol via CH341 USB-to-RS485 adapter
+while simultaneously streaming and recording video.
+"""
+
+import serial
+import time
+import argparse
+import sys
+import os
+import curses
+import cv2
+import threading
+import datetime
+import queue
+import numpy as np
+from pathlib import Path
+
+class PTZController:
+    """Pelco-D PTZ camera controller using RS485 via CH341 USB adapter"""
+
+    def __init__(self, port='/dev/ttyUSB0', baudrate=9600, address=0x01):
+        """
+        Initialize the PTZ controller
+
+        Args:
+            port (str): Serial port path for the CH341 adapter
+            baudrate (int): Communication baudrate (2400, 4800, 9600, or 38400)
+            address (int): Camera address (1-255)
+        """
+        self.port = port
+        self.baudrate = baudrate
+        self.address = address
+        self.ser = None
+        self.connect()
+
+    def connect(self):
+        """Establish a serial connection to the PTZ camera"""
+        try:
+            self.ser = serial.Serial(
+                port=self.port,
+                baudrate=self.baudrate,
+                bytesize=serial.EIGHTBITS,
+                parity=serial.PARITY_NONE,
+                stopbits=serial.STOPBITS_ONE,
+                timeout=1
+            )
+            print(f"Connected to {self.port} at {self.baudrate} baud")
+        except serial.SerialException as e:
+            print(f"Error connecting to {self.port}: {e}")
+            raise
+
+    def _calculate_checksum(self, data):
+        """Calculate Pelco-D checksum (sum of bytes mod 256)"""
+        return sum(data) % 256
+
+    def _send_pelco_command(self, command_1, command_2, data_1=0, data_2=0):
+        """
+        Send Pelco-D formatted command
+
+        Args:
+            command_1 (int): First command byte
+            command_2 (int): Second command byte
+            data_1 (int): Data byte 1 (pan speed, 0-63)
+            data_2 (int): Data byte 2 (tilt speed, 0-63)
+        """
+        message = [
+            0xFF,       # Start byte
+            self.address,
+            command_1,
+            command_2,
+            data_1,     # Pan speed (00-3F)
+            data_2      # Tilt speed (00-3F)
+        ]
+        checksum = self._calculate_checksum(message[1:])  # Exclude start byte
+        message.append(checksum)
+
+        try:
+            self.ser.write(bytes(message))
+            time.sleep(0.1)  # Adjust based on device response
+        except serial.SerialException as e:
+            print(f"Communication error: {e}")
+
+    # Basic movement commands
+    def stop(self):
+        """Stop all movement"""
+        self._send_pelco_command(0x00, 0x00)
+        return "Stopped movement"
+
+    def pan_left(self, speed=0x20):
+        """Pan left at specified speed (00-3F)"""
+        self._send_pelco_command(0x00, 0x04, speed, 0x00)
+        return f"Panning left at speed: {speed}"
+
+    def pan_right(self, speed=0x20):
+        """Pan right at specified speed (00-3F)"""
+        self._send_pelco_command(0x00, 0x02, speed, 0x00)
+        return f"Panning right at speed: {speed}"
+
+    def tilt_up(self, speed=0x20):
+        """Tilt up at specified speed (00-3F)"""
+        self._send_pelco_command(0x00, 0x08, 0x00, speed)
+        return f"Tilting up at speed: {speed}"
+
+    def tilt_down(self, speed=0x20):
+        """Tilt down at specified speed (00-3F)"""
+        self._send_pelco_command(0x00, 0x10, 0x00, speed)
+        return f"Tilting down at speed: {speed}"
+
+    def move_diagonal(self, pan_direction, tilt_direction, pan_speed=0x20, tilt_speed=0x20):
+        """Move diagonally by combining pan and tilt commands"""
+        command_byte = 0x00
+
+        # Set pan direction bits
+        if pan_direction == "left":
+            command_byte |= 0x04
+        elif pan_direction == "right":
+            command_byte |= 0x02
+
+        # Set tilt direction bits
+        if tilt_direction == "up":
+            command_byte |= 0x08
+        elif tilt_direction == "down":
+            command_byte |= 0x10
+
+        self._send_pelco_command(0x00, command_byte, pan_speed, tilt_speed)
+        return f"Moving diagonally: {pan_direction}/{tilt_direction} at speed: {pan_speed}/{tilt_speed}"
+
+    # Zoom control
+    def zoom_in(self):
+        """Zoom in"""
+        self._send_pelco_command(0x00, 0x20)
+        return "Zooming in"
+
+    def zoom_out(self):
+        """Zoom out"""
+        self._send_pelco_command(0x00, 0x40)
+        return "Zooming out"
+
+    # Preset position control
+    def goto_preset(self, preset_num):
+        """Go to preset position (1-255)"""
+        if 1 <= preset_num <= 255:
+            self._send_pelco_command(0x00, 0x07, preset_num)
+            return f"Moving to preset position: {preset_num}"
+        return "Invalid preset number"
+
+    def set_preset(self, preset_num):
+        """Set preset position (1-255)"""
+        if 1 <= preset_num <= 255:
+            self._send_pelco_command(0x00, 0x03, preset_num)
+            return f"Setting preset position: {preset_num}"
+        return "Invalid preset number"
+
+    # Special functions from the camera manual
+    def set_scan_left_limit(self):
+        """Set left limit for scan (preset 50)"""
+        self.set_preset(50)
+        return "Setting scan left limit (start point)"
+
+    def set_scan_right_limit(self):
+        """Set right limit for scan (preset 51)"""
+        self.set_preset(51)
+        return "Setting scan right limit (end point)"
+
+    def start_scan(self):
+        """Start horizontal scanning between limits"""
+        self.goto_preset(51)
+        return "Starting horizontal scan"
+
+    def stop_scan(self):
+        """Stop horizontal scanning"""
+        self.goto_preset(50)
+        return "Stopping horizontal scan"
+
+    def toggle_backlight_compensation(self, enable=True):
+        """Toggle backlight compensation (preset 55)"""
+        if enable:
+            self.goto_preset(55)
+            return "Enabling backlight compensation"
+        else:
+            self.set_preset(55)
+            return "Disabling backlight compensation"
+
+    def toggle_digital_zoom(self, enable=True):
+        """Toggle digital zoom (preset 58)"""
+        if enable:
+            self.goto_preset(58)
+            return "Enabling digital zoom"
+        else:
+            self.set_preset(58)
+            return "Disabling digital zoom"
+
+    def toggle_auto_focus(self, auto=True):
+        """Toggle between auto and manual focus (preset 59)"""
+        if auto:
+            self.goto_preset(59)
+            return "Enabling auto focus"
+        else:
+            self.set_preset(59)
+            return "Switching to manual focus"
+
+    def toggle_auto_iris(self, auto=True):
+        """Toggle between auto and manual iris (preset 60)"""
+        if auto:
+            self.goto_preset(60)
+            return "Enabling auto iris"
+        else:
+            self.set_preset(60)
+            return "Switching to manual iris"
+
+    def toggle_day_night_mode(self, day_mode=True):
+        """Toggle between day (color) and night (B&W) modes (preset 67)"""
+        if day_mode:
+            self.goto_preset(67)
+            return "Switching to day mode (color)"
+        else:
+            self.set_preset(67)
+            return "Switching to night mode (B&W)"
+
+    def reboot_camera(self):
+        """Reboot the camera (preset 54)"""
+        self.goto_preset(54)
+        return "Rebooting camera"
+
+    def run_self_test(self):
+        """Run camera self-test (preset 81)"""
+        self.goto_preset(81)
+        return "Running camera self-test"
+
+    def toggle_auto_return(self, enable=True):
+        """Enable/disable auto return to home position after inactivity"""
+        if enable:
+            self.goto_preset(90)
+            return "Enabling auto return to home after inactivity"
+        else:
+            self.set_preset(90)
+            return "Disabling auto return"
+
+    def toggle_long_focus_speed_limit(self, enable=True):
+        """Enable/disable long focus speed limiting"""
+        if enable:
+            self.goto_preset(210)
+            return "Enabling long focus speed limit"
+        else:
+            self.goto_preset(211)
+            return "Disabling long focus speed limit"
+
+    def toggle_power_memory(self, enable=True):
+        """Enable/disable power memory (position after power cycle)"""
+        if enable:
+            self.goto_preset(221)
+            return "Enabling power cycle memory"
+        else:
+            self.goto_preset(220)
+            return "Disabling power cycle memory"
+
+    def close(self):
+        """Close the serial connection"""
+        if self.ser and self.ser.is_open:
+            self.ser.close()
+            return "Connection closed"
+
+
+class CameraStream:
+    """Class to handle camera streaming and recording"""
+
+    def __init__(self, ip="192.168.1.108", username="admin", password="abcd1234", port=554):
+        """
+        Initialize the camera stream
+
+        Args:
+            ip (str): Camera IP address
+            username (str): Camera login username
+            password (str): Camera login password
+            port (int): RTSP port
+        """
+        self.ip = ip
+        self.username = username
+        self.password = password
+        self.port = port
+
+        # RTSP URL templates
+        self.rtsp_templates = {
+            "main": f"rtsp://{username}:{password}@{ip}:{port}/h264/ch1/main/av_stream",
+            "sub": f"rtsp://{username}:{password}@{ip}:{port}/h264/ch1/sub/av_stream"
+        }
+
+        self.stream_url = None
+        self.cap = None
+        self.recording = False
+        self.paused = False
+        self.displaying = False
+        self.stream_thread = None
+        self.recording_thread = None
+        self.out = None
+        self.frame_queue = queue.Queue(maxsize=30)  # Buffer for frames
+        self.current_frame = None
+        self.resolution = None
+        self.fps = 0
+        self.stream_type = "main"
+        self.recordings_dir = Path("./recordings")
+        self.recordings_dir.mkdir(exist_ok=True)
+        self.playback_file = None
+        self.playback_cap = None
+
+    def connect(self, stream_type="main"):
+        """Connect to the camera stream"""
+        self.stream_type = stream_type
+        self.stream_url = self.rtsp_templates[stream_type]
+
+        # Release previous capture if any
+        if self.cap and self.cap.isOpened():
+            self.cap.release()
+
+        # Connect to camera
+        self.cap = cv2.VideoCapture(self.stream_url)
+
+        if not self.cap.isOpened():
+            return f"Error connecting to {self.stream_url}"
+
+        # Get stream properties
+        self.resolution = (
+            int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
+            int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
+        )
+        self.fps = self.cap.get(cv2.CAP_PROP_FPS)
+
+        return f"Connected to {self.stream_type} stream: {self.resolution[0]}x{self.resolution[1]} at {self.fps} FPS"
+
+    def switch_stream(self, stream_type):
+        """Switch between main and sub streams"""
+        if stream_type not in self.rtsp_templates:
+            return f"Invalid stream type: {stream_type}"
+
+        if stream_type == self.stream_type:
+            return f"Already using {stream_type} stream"
+
+        # Stop current operations
+        self.stop_stream()
+
+        # Connect to new stream
+        result = self.connect(stream_type)
+
+        # Resume operations if needed
+        if self.displaying:
+            self.start_stream()
+
+        return result
+
+    def start_stream(self):
+        """Start streaming thread"""
+        if self.stream_thread and self.stream_thread.is_alive():
+            return "Stream already running"
+
+        self.displaying = True
+        self.paused = False
+        self.stream_thread = threading.Thread(target=self._stream_worker, daemon=True)
+        self.stream_thread.start()
+        return f"Started {self.stream_type} stream"
+
+    def stop_stream(self):
+        """Stop streaming"""
+        self.displaying = False
+        if self.stream_thread:
+            self.stream_thread.join(timeout=1.0)
+        cv2.destroyAllWindows()
+        return "Stream stopped"
+
+    def pause_stream(self):
+        """Pause/unpause streaming"""
+        self.paused = not self.paused
+        return "Stream paused" if self.paused else "Stream resumed"
+
+    def start_recording(self):
+        """Start video recording"""
+        if self.recording:
+            return "Already recording"
+
+        if not self.cap or not self.cap.isOpened():
+            return "Cannot record: No active stream"
+
+        # Create a filename with timestamp
+        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
+        filename = self.recordings_dir / f"recording_{timestamp}_{self.stream_type}.mp4"
+
+        # Create video writer
+        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
+        self.out = cv2.VideoWriter(
+            str(filename),
+            fourcc,
+            self.fps,
+            self.resolution
+        )
+
+        self.recording = True
+
+        # Start recording thread if not streaming
+        if not self.displaying:
+            self.recording_thread = threading.Thread(target=self._recording_worker, daemon=True)
+            self.recording_thread.start()
+
+        return f"Started recording to {filename}"
+
+    def stop_recording(self):
+        """Stop video recording"""
+        if not self.recording:
+            return "Not recording"
+
+        self.recording = False
+
+        if self.recording_thread:
+            self.recording_thread.join(timeout=1.0)
+
+        if self.out:
+            self.out.release()
+            self.out = None
+
+        return "Recording stopped"
+
+    def list_recordings(self):
+        """List all available recordings"""
+        recordings = list(self.recordings_dir.glob("*.mp4"))
+        if not recordings:
+            return "No recordings found"
+
+        recordings_list = "\n".join([f"{i+1}. {rec.name}" for i, rec in enumerate(recordings)])
+        return f"Available recordings:\n{recordings_list}"
+
+    def start_playback(self, filename):
+        """Start playback of a recorded video"""
+        # Stop current operations
+        self.stop_stream()
+        self.stop_recording()
+
+        # Check if file exists
+        playback_path = self.recordings_dir / filename
+        if not playback_path.exists():
+            # Try with raw filename
+            recordings = list(self.recordings_dir.glob("*.mp4"))
+            matches = [rec for rec in recordings if filename in rec.name]
+
+            if not matches:
+                return f"Recording '{filename}' not found"
+
+            playback_path = matches[0]
+
+        self.playback_file = str(playback_path)
+        self.playback_cap = cv2.VideoCapture(self.playback_file)
+
+        if not self.playback_cap.isOpened():
+            return f"Error opening recording {playback_path}"
+
+        # Start playback thread
+        self.playback_thread = threading.Thread(target=self._playback_worker, daemon=True)
+        self.playback_thread.start()
+
+        return f"Playing {playback_path.name}"
+
+    def stop_playback(self):
+        """Stop playback"""
+        if not self.playback_cap:
+            return "No active playback"
+
+        if self.playback_cap:
+            self.playback_cap.release()
+            self.playback_cap = None
+            self.playback_file = None
+
+        cv2.destroyAllWindows()
+        return "Playback stopped"
+
+    def take_snapshot(self):
+        """Take a snapshot of the current frame"""
+        if not self.current_frame is not None:
+            return "No frame available for snapshot"
+
+        # Create a filename with timestamp
+        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
+        filename = self.recordings_dir / f"snapshot_{timestamp}.jpg"
+
+        # Save snapshot
+        cv2.imwrite(str(filename), self.current_frame)
+        return f"Snapshot saved to {filename}"
+
+    def _stream_worker(self):
+        """Worker thread for streaming"""
+        try:
+            while self.displaying:
+                if not self.cap or not self.cap.isOpened():
+                    time.sleep(0.5)
+                    continue
+
+                if not self.paused:
+                    ret, frame = self.cap.read()
+
+                    if not ret:
+                        print("Failed to receive frame. Reconnecting...")
+                        self.cap.release()
+                        time.sleep(1)
+                        self.cap = cv2.VideoCapture(self.stream_url)
+                        continue
+
+                    # Store current frame
+                    self.current_frame = frame
+
+                    # Put frame in queue for recording thread
+                    if self.recording and not self.frame_queue.full():
+                        self.frame_queue.put(frame, block=False)
+
+                    # Add status text to display frame
+                    display_frame = frame.copy()
+                    status_text = f"{self.stream_type.upper()} {self.resolution[0]}x{self.resolution[1]}"
+                    if self.recording:
+                        status_text += " | RECORDING"
+                        # Add red circle indicator
+                        cv2.circle(display_frame, (20, 20), 10, (0, 0, 255), -1)
+
+                    cv2.putText(display_frame, status_text, (10, 30),
+                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
+
+                    # Display frame
+                    cv2.imshow('Camera Stream', display_frame)
+
+                # Process key events (separate from curses keyboard input)
+                key = cv2.waitKey(1) & 0xFF
+                if key == 27:  # ESC key - emergency exit
+                    self.displaying = False
+                    break
+
+        except Exception as e:
+            print(f"Streaming error: {e}")
+        finally:
+            cv2.destroyAllWindows()
+
+    def _recording_worker(self):
+        """Worker thread for recording without display"""
+        try:
+            while self.recording:
+                if not self.cap or not self.cap.isOpened():
+                    time.sleep(0.5)
+                    continue
+
+                ret, frame = self.cap.read()
+
+                if not ret:
+                    print("Failed to receive frame for recording. Reconnecting...")
+                    self.cap.release()
+                    time.sleep(1)
+                    self.cap = cv2.VideoCapture(self.stream_url)
+                    continue
+
+                # Store current frame
+                self.current_frame = frame
+
+                # Write frame to video file
+                if self.out:
+                    self.out.write(frame)
+
+        except Exception as e:
+            print(f"Recording error: {e}")
+
+    def _playback_worker(self):
+        """Worker thread for playback"""
+        try:
+            # Get video properties
+            fps = self.playback_cap.get(cv2.CAP_PROP_FPS)
+            frame_time = 1000 / fps if fps > 0 else 30
+
+            while self.playback_cap and self.playback_cap.isOpened():
+                ret, frame = self.playback_cap.read()
+
+                if not ret:
+                    # End of video
+                    break
+
+                # Add playback status text
+                cv2.putText(frame, "PLAYBACK", (10, 30),
+                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
+
+                # Display frame
+                cv2.imshow('Playback', frame)
+
+                # Control playback speed
+                key = cv2.waitKey(int(frame_time)) & 0xFF
+                if key == 27:  # ESC key - stop playback
+                    break
+
+        except Exception as e:
+            print(f"Playback error: {e}")
+        finally:
+            if self.playback_cap:
+                self.playback_cap.release()
+            cv2.destroyAllWindows()
+
+    def close(self):
+        """Close all connections and resources"""
+        self.stop_playback()
+        self.stop_recording()
+        self.stop_stream()
+
+        if self.cap and self.cap.isOpened():
+            self.cap.release()
+
+        return "Camera stream closed"
+
+
+class PTZCameraSystem:
+    """Combined PTZ control and camera streaming system"""
+
+    def __init__(self, ptz_port='/dev/ttyUSB0', ptz_baudrate=9600, ptz_address=1,
+                 camera_ip="192.168.1.108", camera_username="admin",
+                 camera_password="abcd1234", camera_port=554):
+        """Initialize the combined system"""
+        self.ptz = PTZController(port=ptz_port, baudrate=ptz_baudrate, address=ptz_address)
+        self.camera = CameraStream(
+            ip=camera_ip,
+            username=camera_username,
+            password=camera_password,
+            port=camera_port
+        )
+        self.status_message = "System initialized"
+        self.running = False
+
+    def start(self):
+        """Start the system"""
+        self.running = True
+        # Connect to camera stream
+        self.status_message = self.camera.connect()
+        # Start streaming
+        self.camera.start_stream()
+
+    def stop(self):
+        """Stop the system"""
+        self.running = False
+        self.ptz.stop()
+        self.camera.close()
+        self.ptz.close()
+
+    def interactive_control(self):
+        """
+        Interactive control mode using keyboard
+        """
+        # Initialize curses
+        screen = curses.initscr()
+        curses.noecho()
+        curses.cbreak()
+        screen.keypad(True)
+
+        try:
+            screen.clear()
+            screen.addstr(0, 0, "PTZ Camera Control & Streaming System")
+            screen.addstr(2, 0, "Movement Controls:")
+            screen.addstr(3, 0, "  Arrow keys: Pan/Tilt")
+            screen.addstr(4, 0, "  Home/End/PgUp/PgDn: Diagonal movements")
+            screen.addstr(5, 0, "  Space: Stop movement")
+            screen.addstr(6, 0, "  +/-: Zoom in/out")
+            screen.addstr(7, 0, "  1/2/3: Speed (Slow/Medium/Fast)")
+            screen.addstr(9, 0, "Camera Controls:")
+            screen.addstr(10, 0, "  p: Set preset position")
+            screen.addstr(11, 0, "  g: Go to preset position")
+            screen.addstr(12, 0, "  s: Control scan function")
+            screen.addstr(13, 0, "  d/n: Toggle day/night mode")
+            screen.addstr(14, 0, "  a: Toggle auto focus")
+            screen.addstr(15, 0, "  b: Toggle backlight compensation")
+            screen.addstr(17, 0, "Stream Controls:")
+            screen.addstr(18, 0, "  m: Switch stream (main/sub)")
+            screen.addstr(19, 0, "  r: Start/stop recording")
+            screen.addstr(20, 0, "  c: Take snapshot")
+            screen.addstr(21, 0, "  v: View recordings")
+            screen.addstr(22, 0, "  z: Pause/resume stream")
+            screen.addstr(24, 0, "  q: Quit")
+
+            screen.refresh()
+
+            scanning = False
+            speed = 0x20  # Default speed (medium)
+
+            # Start camera stream
+            self.start()
+
+            while self.running:
+                # Display status message
+                screen.addstr(26, 0, f"Status: {self.status_message[:60]}")
+                screen.clrtoeol()
+                screen.refresh()
+
+                # Get keyboard input with timeout
+                screen.timeout(100)  # 100ms timeout
+                key = screen.getch()
+
+                if key == -1:  # No key pressed
+                    continue
+
+                if key == ord('q'):
+                    self.running = False
+                    break
+
+                # Movement controls
+                elif key == curses.KEY_UP:
+                    self.status_message = self.ptz.tilt_up(speed)
+                elif key == curses.KEY_DOWN:
+                    self.status_message = self.ptz.tilt_down(speed)
+                elif key == curses.KEY_LEFT:
+                    self.status_message = self.ptz.pan_left(speed)
+                elif key == curses.KEY_RIGHT:
+                    self.status_message = self.ptz.pan_right(speed)
+                elif key == curses.KEY_HOME:
+                    self.status_message = self.ptz.move_diagonal("left", "up", speed, speed)
+                elif key == curses.KEY_END:
+                    self.status_message = self.ptz.move_diagonal("left", "down", speed, speed)
+                elif key == curses.KEY_PPAGE:  # Page Up
+                    self.status_message = self.ptz.move_diagonal("right", "up", speed, speed)
+                elif key == curses.KEY_NPAGE:  # Page Down
+                    self.status_message = self.ptz.move_diagonal("right", "down", speed, speed)
+                elif key == ord(' '):
+                    self.status_message = self.ptz.stop()
+
+                # Zoom controls
+                elif key == ord('+'):
+                    self.status_message = self.ptz.zoom_in()
+                elif key == ord('-'):
+                    self.status_message = self.ptz.zoom_out()
+
+                # Speed adjustment
+                elif key == ord('1'):
+                    speed = 0x10  # Slow
+                    screen.addstr(27, 0, "Speed: Slow    ")
+                    screen.refresh()
+                    self.status_message = "Speed set to Slow"
+                elif key == ord('2'):
+                    speed = 0x20  # Medium
+                    screen.addstr(27, 0, "Speed: Medium  ")
+                    screen.refresh()
+                    self.status_message = "Speed set to Medium"
+                elif key == ord('3'):
+                    speed = 0x30  # Fast
+                    screen.addstr(27, 0, "Speed: Fast    ")
+                    screen.refresh()
+                    self.status_message = "Speed set to Fast"
+
+                # Preset position controls
+                elif key == ord('p'):
+                    screen.addstr(28, 0, "Enter preset number (1-255): ")
+                    screen.clrtoeol()
+                    curses.echo()
+                    preset_str = screen.getstr(28, 30, 3).decode('utf-8')
+                    curses.noecho()
+                    try:
+                        preset_num = int(preset_str)
+                        if 1 <= preset_num <= 255:
+                            self.status_message = self.ptz.set_preset(preset_num)
+                        else:
+                            self.status_message = "Invalid preset number! Must be 1-255"
+                    except ValueError:
+                        self.status_message = "Invalid input! Enter a number."
+                    screen.refresh()
+
+                elif key == ord('g'):
+                    screen.addstr(28, 0, "Enter preset number (1-255): ")
+                    screen.clrtoeol()
+                    curses.echo()
+                    preset_str = screen.getstr(28, 30, 3).decode('utf-8')
+                    curses.noecho()
+                    try:
+                        preset_num = int(preset_str)
+                        if 1 <= preset_num <= 255:
+                            self.status_message = self.ptz.goto_preset(preset_num)
+                        else:
+                            self.status_message = "Invalid preset number! Must be 1-255"
+                    except ValueError:
+                        self.status_message = "Invalid input! Enter a number."
+                    screen.refresh()
+
+                # Scan controls
+                elif key == ord('s'):
+                    screen.addstr(28, 0, "Scan: L (left/start), R (right/end), S (start scan), X (stop scan): ")
+                    screen.clrtoeol()
+                    scan_key = screen.getch()
+                    if scan_key == ord('l') or scan_key == ord('L'):
+                        self.status_message = self.ptz.set_scan_left_limit()
+                    elif scan_key == ord('r') or scan_key == ord('R'):
+                        self.status_message = self.ptz.set_scan_right_limit()
+                    elif scan_key == ord('s') or scan_key == ord('S'):
+                        self.status_message = self.ptz.start_scan()
+                        scanning = True
+                    elif scan_key == ord('x') or scan_key == ord('X'):
+                        self.status_message = self.ptz.stop_scan()
+                        scanning = False
+                    screen.refresh()
+
+                # Day/night mode
+                elif key == ord('d'):
+                    self.status_message = self.ptz.toggle_day_night_mode(True)
+                elif key == ord('n'):
+                    self.status_message = self.ptz.toggle_day_night_mode(False)
+
+                # Auto focus
+                elif key == ord('a'):
+                    screen.addstr(28, 0, "Auto focus: 1 (on) or 0 (off): ")
+                    screen.clrtoeol()
+                    af_key = screen.getch()
+                    if af_key == ord('1'):
+                        self.status_message = self.ptz.toggle_auto_focus(True)
+                    elif af_key == ord('0'):
+                        self.status_message = self.ptz.toggle_auto_focus(False)
+                    screen.refresh()
+
+                # Backlight compensation
+                elif key == ord('b'):
+                    screen.addstr(28, 0, "Backlight compensation: 1 (on) or 0 (off): ")
+                    screen.clrtoeol()
+                    blc_key = screen.getch()
+                    if blc_key == ord('1'):
+                        self.status_message = self.ptz.toggle_backlight_compensation(True)
+                    elif blc_key == ord('0'):
+                        self.status_message = self.ptz.toggle_backlight_compensation(False)
+                    screen.refresh()
+
+                # Stream quality/resolution switching
+                elif key == ord('m'):
+                    new_stream_type = "sub" if self.camera.stream_type == "main" else "main"
+                    self.status_message = self.camera.switch_stream(new_stream_type)
+
+                # Recording controls
+                elif key == ord('r'):
+                    if not self.camera.recording:
+                        self.status_message = self.camera.start_recording()
+                    else:
+                        self.status_message = self.camera.stop_recording()
+
+                # Snapshot
+                elif key == ord('c'):
+                    self.status_message = self.camera.take_snapshot()
+
+                # Pause/resume stream
+                elif key == ord('z'):
+                    self.status_message = self.camera.pause_stream()
+
+                # View recordings
+                elif key == ord('v'):
+                    # List recordings
+                    recordings_list = self.camera.list_recordings()
+
+                    # Clear area for list
+                    for i in range(28, 35):
+                        screen.addstr(i, 0, " " * 70)
+
+                    # Display list with selection options
+                    lines = recordings_list.split('\n')
+                    for i, line in enumerate(lines):
+                        screen.addstr(28 + i, 0, line)
+
+                    # Prompt for playback
+                    if "No recordings" not in recordings_list:
+                        screen.addstr(28 + len(lines), 0, "Enter number to play or 'x' to cancel: ")
+                        screen.clrtoeol()
+                        curses.echo()
+                        choice = screen.getstr(28 + len(lines), 40, 5).decode('utf-8')
+                        curses.noecho()
+
+                        if choice.lower() != 'x':
+                            try:
+                                # Check if input is a number for selection
+                                if choice.isdigit():
+                                    idx = int(choice) - 1
+                                    if 0 <= idx < len(lines) - 1:  # -1 for the header line
+                                        # Extract filename from the list
+                                        filename = lines[idx + 1].split('. ')[1]
+                                        self.status_message = self.camera.start_playback(filename)
+                                    else:
+                                        self.status_message = "Invalid selection"
+                                else:
+                                    # Treat as direct filename
+                                    self.status_message = self.camera.start_playback(choice)
+                            except Exception as e:
+                                self.status_message = f"Playback error: {e}"
+
+                    screen.clear()
+                    screen.addstr(0, 0, "PTZ Camera Control & Streaming System")
+                    screen.addstr(2, 0, "Movement Controls:")
+                    screen.addstr(3, 0, "  Arrow keys: Pan/Tilt")
+                    screen.addstr(4, 0, "  Home/End/PgUp/PgDn: Diagonal movements")
+                    screen.addstr(5, 0, "  Space: Stop movement")
+                    screen.addstr(6, 0, "  +/-: Zoom in/out")
+                    screen.addstr(7, 0, "  1/2/3: Speed (Slow/Medium/Fast)")
+                    screen.addstr(9, 0, "Camera Controls:")
+                    screen.addstr(10, 0, "  p: Set preset position")
+                    screen.addstr(11, 0, "  g: Go to preset position")
+                    screen.addstr(12, 0, "  s: Control scan function")
+                    screen.addstr(13, 0, "  d/n: Toggle day/night mode")
+                    screen.addstr(14, 0, "  a: Toggle auto focus")
+                    screen.addstr(15, 0, "  b: Toggle backlight compensation")
+                    screen.addstr(17, 0, "Stream Controls:")
+                    screen.addstr(18, 0, "  m: Switch stream (main/sub)")
+                    screen.addstr(19, 0, "  r: Start/stop recording")
+                    screen.addstr(20, 0, "  c: Take snapshot")
+                    screen.addstr(21, 0, "  v: View recordings")
+                    screen.addstr(22, 0, "  z: Pause/resume stream")
+                    screen.addstr(24, 0, "  q: Quit")
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetSelector\">\n    <selectionStates>\n      <SelectionState runConfigName=\"app\">\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\n      </SelectionState>\n    </selectionStates>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision c202139940db200d59956b96b2d57da2b9f2dd1d)
+++ b/.idea/deploymentTargetSelector.xml	(date 1746532325272)
@@ -4,6 +4,14 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
+        <DropdownSelection timestamp="2025-05-06T09:16:22.294071Z">
+          <Target type="DEFAULT_BOOT">
+            <handle>
+              <DeviceId pluginId="PhysicalDevice" identifier="serial=0123456789ABCDEF" />
+            </handle>
+          </Target>
+        </DropdownSelection>
+        <DialogSelection />
       </SelectionState>
     </selectionStates>
   </component>
